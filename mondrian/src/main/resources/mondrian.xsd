<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- region: processed elements -->

  <xs:element name="Schema" type="SchemaType"/>

  <xs:complexType name="SchemaType" >
    <xs:annotation>
      <xs:documentation>
        A schema is a collection of cubes and virtual cubes.
        It can also contain shared dimensions (for use by those
        cubes), named sets, roles, and declarations of
        user-defined functions.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="Parameter" type="ParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Dimension" type="DimensionType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Dimension available to be used by any cube of this schema.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Cube" type="CubeType" minOccurs="1" maxOccurs="unbounded"/>
      <xs:element name="VirtualCube" type="VirtualCubeType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="NamedSet" type="NamedSetType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Role" type="RoleType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="UserDefinedFunction" type="UserDefinedFunctionType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this schema
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this schema.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="measuresCaption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Label for the measures dimension.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultRole" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the default role for connections to this schema.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="AnnotationsType">
    <xs:annotation>
      <xs:documentation>
        Contains values of user-defined properties.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Annotation" type="AnnotationType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AnnotationType" mixed="true">
      <xs:attribute name="name" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="ParameterType">
    <xs:annotation>
      <xs:documentation>
        A Parameter defines a schema parameter. It can be referenced from an MDX
        statement using the ParamRef function and, if not final, its value can be overridden.
      </xs:documentation>
    </xs:annotation>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" default="String"> <!-- TODO this particular use case should be tested (using default value instead of required) but in principal MondrianDef should apply the default value -->
      <xs:annotation>
        <xs:documentation>
          Indicates the type of this parameter: String, Numeric, Integer,
          Boolean, Date, Time, Timestamp, or Member.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="String"/>
          <xs:enumeration value="Numeric"/>
          <xs:enumeration value="Integer"/>
          <xs:enumeration value="Boolean"/>
          <xs:enumeration value="Date"/>
          <xs:enumeration value="Time"/>
          <xs:enumeration value="Timestamp"/>
          <xs:enumeration value="Member"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="modifiable" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          If false, statement cannot change the value of this parameter; the
          parameter becomes effectively constant (provided that its default
          value expression always returns the same value). Default is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Expression for the default value of this parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="DimensionType"> <!-- TODO DimensionType seems like an odd mixed bag of both shared and private dimension information. However that's how MondrianDef has it...  -->
    <xs:annotation>
      <xs:documentation>
        A Dimension is a collection of hierarchies. There are
        two kinds: a public dimension belongs to a
        Schema, and be used by several cubes; a
        private dimension belongs to a
        Cube. The foreignKey field is only
        applicable to private dimensions.
      </xs:documentation>
    </xs:annotation>

    <xs:complexContent>
      <xs:extension base="CubeDimensionType">
        <xs:sequence>
          <xs:element name="Hierarchy" type="HierarchyType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs="1" when on MondrianDef its optional -->
        </xs:sequence>

        <xs:attribute name="type" default="StandardDimension">
          <xs:annotation>
            <xs:documentation>
              The dimension's type may be one of "StandardDimension" or "TimeDimension".
              A time  dimension will allow the use of the MDX time functions
              (WTD, YTD, QTD, etc.). Use a standard dimension if the dimension
              is not a time-related dimension. The default value is "StandardDimension".
            </xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="StandardDimension"/>
              <xs:enumeration value="TimeDimension"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="usagePrefix">
          <xs:annotation>
            <xs:documentation>
              If present, then this is prepended to the Dimension column
              names during the building of collapse dimension aggregates
              allowing 1) different dimensions to be disambiguated
              during aggregate table recognition.
              This should only be set for private dimensions. <!-- TODO if this is only for private dimensions then probably hierarchical relation between xsd dimension types should change -->
            </xs:documentation>
          </xs:annotation>
        </xs:attribute >

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CubeDimensionType" abstract="true"> <!-- TODO validate abstract attribute. Element was named PrivateDimension in other XSD. Or maybe not... Might be -->
    <!-- TODO All Dimension Types need to be verified as they are a weird mix of attributes and elements  -->
    <xs:annotation>
      <xs:documentation>
        A CubeDimension is either a usage of a Dimension ('shared
        dimension', in MSOLAP parlance), or a 'private dimension'.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
    </xs:sequence>

    <xs:attribute name="name" use="required"/>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the Dimension's name.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this dimension is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this dimension.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="foreignKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column in the fact table which joins
          to the leaf level of this dimension. Required in a
          private Dimension or a DimensionUsage, but not in a
          public Dimension.
        </xs:documentation> <!-- TODO if foreignKey is not required in a shared dimension then probably hierarchical relation between xsd dimension types should change -->
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="highCardinality" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>
          Flag to mark this dimension as a high cardinality one
          and avoid caching.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="HierarchyType">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
                Defines a hierarchy.
                You must specify at most one <Relation> or memberReaderClass.
                If you specify none, the hierarchy is assumed to come from the same
                fact table of the current cube.
                ]]>
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:group ref="RelationOrJoinGroup" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The Table, Join (set of tables), View (SQL statement), or InlineTable which populates this hierarchy.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:element name="Level" type="LevelType" minOccurs="1" maxOccurs="unbounded"/>
      <xs:element name="MemberReaderParameter" type="MemberReaderParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the hierarchy. If this is not specified, the hierarchy
          has the same name as its dimension.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this hierarchy is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute> <!-- New -->
    <xs:attribute name="hasAll" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>
          Whether this hierarchy has an 'all' member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allMemberName" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the 'all' member. If this attribute is not specified,
          the all member is named 'All hierarchyName', for example, 'All Store'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allMemberCaption" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead as the all member's name.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allLevelName" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the 'all' level. If this attribute is not specified, the all member is named '(All)'.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="primaryKey" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column which identifies members, and which is referenced by rows
          in the fact table. If not specified, the key of the lowest level is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="primaryKeyTable" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the table which contains primaryKey. If the hierarchy has only one table,
          defaults to that; otherwise it is required.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMember" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Default member of this hierarchy.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="memberReaderClass" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the custom member reader class. Must implement the
          mondrian.rolap.MemberReader interface.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string to be displayed in the user interface. If not specified, the hierarchy's name is used.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this hierarchy. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayFolder" type="xs:string"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Specifies the folder in which to list the hierarchy for users.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute> <!-- New -->
    <xs:attribute name="uniqueKeyLevelName" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Should be set to the level (if such a level exists) at which depth it is known that all members
          have entirely unique rows, allowing SQL GROUP BY clauses to be completely eliminated from the query.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="origin" type="xs:unsignedShort">  <!-- New --> <!-- TODO check what this is... what values should be settable. type inferred from mondrian.xmla.RowsetDefinition class.  -->
      <xs:annotation>
        <xs:documentation>
          A bit mask that determines the source of the hierarchy:
          MD_ORIGIN_USER_DEFINED identifies levels in a user defined hierarchy (0x0000001).
          MD_ORIGIN_ATTRIBUTE identifies levels in an attribute hierarchy (0x0000002).
          MD_ORIGIN_INTERNAL identifies levels in attribute hierarchies that are not enabled (0x0000004).
          MD_ORIGIN_KEY_ATTRIBUTE identifies levels in a key attribute hierarchy (0x0000008).

          The default value is MD_ORIGIN_USER_DEFINED. For Measure it is MD_ORIGIN_ATTRIBUTE &amp; MD_ORIGIN_INTERNAL (0x0000006)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="CubeType">

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:group ref="RelationGroup" minOccurs="1" maxOccurs="1"> <!-- New : the used group in the other xsd is named FactTable and did not include the InlineTable element -->
        <xs:annotation>
          <xs:documentation>
            The element from this group will represent the fact table of the cube.
            The fact table is the source of all measures in this cube.
            If this is a Table and the schema name is not present, table name is left unqualified.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <!-- Dimensions -->
        <xs:annotation>
          <xs:documentation>
            Dimensions available to be used by this cube.
          </xs:documentation>
        </xs:annotation>
        <xs:element name="Dimension" type="DimensionType"/>
        <xs:element name="DimensionUsage" type="DimensionUsageType"/>
      </xs:choice>
      <xs:element name="Measure" type="MeasureType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Measure available to be used by this cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CalculatedMember" type="CalculatedMemberType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Calculated members in this cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NamedSet" type="NamedSetType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Named sets in this virtual cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the cube's name. Can be localized from Properties
          file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Whether this cube is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this cube. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultMeasure" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the measure that would be taken as the default measure of the cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cache" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Should the Fact table data for this Cube be cached by Mondrian or not.
          The default action is to cache the data.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether element is enabled - if true, then the Cube is realized
          otherwise it is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="VirtualCubeType">
    <xs:annotation>
      <xs:documentation>
        A VirtualCube is a set of dimensions and measures gleaned from other cubes.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="CubeUsages" type="CubeUsagesType" minOccurs="1"> <!-- TODO check minOccurs="1" as MondrianDef does not require a VirtualCube to have CubeUsages -->
        <xs:annotation>
          <xs:documentation>
            List of base cubes used by the virtual cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="VirtualCubeDimension" type="VirtualCubeDimensionType" minOccurs="1" maxOccurs="unbounded"> <!-- TODO check minOccurs="1" as MondrianDef does not require a VirtualCube to have VirtualCubeDimensions -->
        <xs:annotation>
          <xs:documentation>
            A VirtualCubeDimension is a usage of a Dimension in a VirtualCube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="VirtualCubeMeasure" type="VirtualCubeMeasureType" minOccurs="1" maxOccurs="unbounded"> <!-- TODO check if minOccurs="1" is correct. It was in the other xsd but is optional in MondrianDef -->
        <xs:annotation>
          <xs:documentation>
            A VirtualCubeMeasure is a usage of a Measure in a VirtualCube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CalculatedMember" type="CalculatedMemberType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Calculated members that belong to this virtual cube.
            (Calculated members inherited from other cubes should not be in this list).
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NamedSet" type="NamedSetType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Named sets in this virtual cube.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="enabled" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this element is enabled - if true, then the Virtual Cube is realized otherwise it is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required"/> <!-- TODO check if this is required. It was in the other xsd but is optional in MondrianDef -->
    <xs:attribute name="defaultMeasure" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the measure that would be taken as the default measure of the cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the cube's name. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- New --> <!-- TODO check if we keep this -->
      <xs:annotation>
        <xs:documentation>
          Whether this cube is visible in the user-interface.
          Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this virtual cube. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="CubeUsagesType">
    <xs:annotation>
      <xs:documentation>
        List of base cubes used by the virtual cube.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="CubeUsage" type="CubeUsageType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CubeUsageType">
    <xs:attribute name="cubeName" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of the cube which the virtualCube uses.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignoreUnrelatedDimensions" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>
          Unrelated dimensions to measures in this cube will be pushed to top level member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VirtualCubeDimensionType">
    <!-- TODO validate is this Dimension Type should inherit from CubeDimensionType like others. According to MondrianDef it does. -->
    <xs:annotation>
      <xs:documentation>
        A VirtualCubeDimension is a usage of a Dimension in a VirtualCube.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="cubeName" type="xs:string"> <!-- TODO probably should be required -->
      <xs:annotation>
        <xs:documentation>
          Name of the cube which the dimension belongs to, or unspecified if the dimension is shared.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string"> <!-- TODO probably should be required -->
      <xs:annotation>
        <xs:documentation>
          Name of the dimension.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VirtualCubeMeasureType">
    <xs:annotation>
      <xs:documentation>
        A VirtualCubeMeasure is a usage of a Measure in a VirtualCube.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
    </xs:sequence>

    <xs:attribute name="cubeName" type="xs:string" use="required"> <!-- TODO not required in MondrianDef -->
      <xs:annotation>
        <xs:documentation>
          Name of the cube which the measure belongs to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required"> <!-- TODO not required in MondrianDef -->
      <xs:annotation>
        <xs:documentation>
          Unique name of the measure within its cube.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether this member is visible in the user-interface. Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="DimensionUsageType">
    <xs:annotation>
      <xs:documentation>
        A DimensionUsage is usage of a shared Dimension within the context of a cube.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CubeDimensionType"> <!-- TODO validate that this Dimension type should inherit from CubeDimensionType. Or just pick the appropriate attributes and elements. -->
        <xs:attribute name="source" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>
              Name of the source dimension. Must be a dimension in this schema. Case-sensitive.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="level" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              Name of the level to join to. If not specified, joins to the lowest level of the dimension.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="usagePrefix" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              If present, then this is prepended to the Dimension column names
              during the building of collapse dimension aggregates allowing 1) different
              dimension usages to be disambiguated during aggregate table recognition and
              2) multiple shared dimensions that have common column names to be disambiguated.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelType">

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="KeyExpression" type="ExpressionViewType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The SQL expression used to populate this level's key.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NameExpression" type="ExpressionViewType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The SQL expression used to populate this level's name.
            If not specified, the level's key is used.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CaptionExpression" type="ExpressionViewType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Expression which forms the caption of members.
            If not specified, the level name is used.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="OrdinalExpression" type="ExpressionViewType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The SQL expression used to populate this level's ordinal.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ParentExpression" type="ExpressionViewType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The SQL expression used to join to the parent member in a parent-child hierarchy.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MemberFormatter" type="MemberFormatterType" minOccurs="0"/> <!-- New -->
      <xs:element name="Closure" type="ClosureType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Specifies the transitive closure of a parent-child hierarchy. Optional, but recommended
            for better performance. The closure is provided as a set of (parent/child) pairs: since it is
            the transitive closure these are actually (ancestor/descendant) pairs.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Property" type="PropertyType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Member property.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="approxRowCount" type="xs:integer">
      <xs:annotation>
        <xs:documentation>
          The estimated number of members in this level. Setting this property improves
          the performance of MDSCHEMA_LEVELS, MDSCHEMA_HIERARCHIES
          and MDSCHEMA_DIMENSIONS XMLA requests.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required" />
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Whether this level is visible in the user-interface. Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="table" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the table that the column comes from. If this hierarchy
          is based upon just one table, defaults to the name of that table;
          otherwise, it is required. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="column" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column which holds the unique identifier of this level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nameColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column which holds the user identifier of this level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ordinalColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column which holds member ordinals.
          If this column is not specified, the key column is used for ordering.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parentColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the column which references the parent member in a parent-child hierarchy.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullParentValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Value which identifies null parents in a parent-child hierarchy. Typical values are 'NULL' and '0'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="ColumnTypeType">
      <xs:annotation>
        <xs:documentation>
          Indicates the type of this level's key column: String, Numeric, Integer, Boolean, Date,
          Time or Timestamp. When generating SQL statements, Mondrian encloses values
          for String columns in quotation marks, but leaves values for Integer and Numeric columns un-quoted.
          Date, Time, and Timestamp values are quoted according to the SQL dialect.
          For a SQL-compliant dialect, the values appear prefixed by their typename, for example, "DATE '2006-06-01'".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalType" type="JavaTypeType"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Indicates the Java type that Mondrian uses to store this
          level's key column. It also determines the JDBC method that
          Mondrian will call to retrieve the column; for example, if the
          Java type is 'int', Mondrian will call 'ResultSet.getInt(int)'.

          Usually this attribute is not needed, because Mondrian can
          choose a sensible type based on the type of the database
          column.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uniqueMembers" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>
          Whether members are unique across all parents. For example, zipcodes are unique across all states.
          The first level's members are always unique.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="levelType" default="Regular">
      <xs:annotation>
        <xs:documentation>
          Whether this is a regular or a time-related level. The value makes a difference to time-related
          functions such as YTD (year-to-date).
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Regular"/>
          <xs:enumeration value="TimeYears"/>
          <xs:enumeration value="TimeHalfYears"/> <!-- New -->
          <xs:enumeration value="TimeQuarters"/>
          <xs:enumeration value="TimeMonths"/>
          <xs:enumeration value="TimeWeeks"/>
          <xs:enumeration value="TimeDays"/>
          <xs:enumeration value="TimeHours"/> <!-- New -->
          <xs:enumeration value="TimeMinutes"/> <!-- New -->
          <xs:enumeration value="TimeSeconds"/> <!-- New -->
          <xs:enumeration value="TimeUndefined"/> <!-- New -->
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hideMemberIf" default="Never">
      <xs:annotation>
        <xs:documentation>
          Condition which determines whether a member of this level is hidden. If a hierarchy has one
          or more levels with hidden members, then it is possible that not all leaf members are the same
          distance from the root, and it is termed a ragged hierarchy.
          Allowable values are: Never (a member always appears; the default);
          IfBlankName (a member doesn't appear if its name is null or empty); and
          IfParentsName (a member appears unless its name matches the parent's.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Never"/>
          <xs:enumeration value="IfBlankName"/>
          <xs:enumeration value="IfParentsName"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="formatter" type="xs:string" > <!-- TODO couldn't find a good way to mark as deprecated. Check if there is a reasonable way to do it -->
      <xs:annotation>
        <xs:documentation>
          This attribute is deprecated. Please use a nested MemberFormatter element.

          Name of a formatter class for the member labels being displayed.
          The class must implement the mondrian.olap.MemberFormatter interface.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the level's name. Can be localized from
          Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this level. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="captionColumn" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of the database column that holds the caption for the members.
          See also the Caption sub-element.
          If neither captionColumn nor Caption are specified, defaults to the nameColumn.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:simpleType name="ColumnTypeType">
    <xs:annotation>
      <xs:documentation>
        Indicates the type of a column: String, Numeric, Integer, Boolean, Date,
        Time or Timestamp. When generating SQL statements, Mondrian encloses values
        for String columns in quotation marks, but leaves values for Integer and Numeric columns un-quoted.
        Date, Time, and Timestamp values are quoted according to the SQL dialect.
        For a SQL-compliant dialect, the values appear prefixed by their typename, for example, "DATE '2006-06-01'".
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="String"/>
      <xs:enumeration value="Numeric"/>
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="Date"/>
      <xs:enumeration value="Time"/>
      <xs:enumeration value="Timestamp"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="JavaTypeType">
    <xs:annotation>
      <xs:documentation>
        Indicates a Java type.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="int"/>
      <xs:enumeration value="long"/>
      <xs:enumeration value="Object"/>
      <xs:enumeration value="String"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="ClosureType">
    <xs:annotation>
      <xs:documentation>
        Specifies the transitive closure of a parent-child hierarchy.
        Optional, but recommended for better performance.
        The closure is provided as a set of (parent/child) pairs:
        since it is the transitive closure these are actually (ancestor/descendant) pairs.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Table" type="TableType" minOccurs="1" maxOccurs="1" />
    </xs:sequence>

    <xs:attribute name="parentColumn" type="xs:string" use="required"/>
    <xs:attribute name="childColumn" type="xs:string" use="required"/>

  </xs:complexType>

  <xs:complexType name="PropertyType">
    <xs:annotation>
      <xs:documentation>
        Member property.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="PropertyFormatter" type="PropertyFormatterType" minOccurs="0"/> <!-- New -->
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required" /> <!-- TODO optional in MondrianDef -->
    <xs:attribute name="column" type="xs:string" use="required" /> <!-- TODO optional in MondrianDef -->
    <xs:attribute name="type" default="String">
      <xs:annotation>
        <xs:documentation>
          Data type of this property: String, Numeric, Integer, Long, Boolean, Date, Time or Timestamp.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="String"/>
          <xs:enumeration value="Numeric"/>
          <xs:enumeration value="Integer"/>
          <xs:enumeration value="Long"/> <!-- New -->
          <xs:enumeration value="Boolean"/>
          <xs:enumeration value="Date"/>
          <xs:enumeration value="Time"/>
          <xs:enumeration value="Timestamp"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="formatter" type="xs:string" > <!-- TODO couldn't find a good way to mark as deprecated. Check if there is a reasonable way to do it -->
      <xs:annotation>
        <xs:documentation>
          This attribute is deprecated. Please use a nested PropertyFormatter element.

          Name of a formatter class for the appropriate property value being displayed.

          The class must implement the mondrian.spi.PropertyFormatter interface.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the name. Can be localized from Properties
          file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this member property. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dependsOnLevelValue" type="xs:boolean" default="false" > <!-- TODO the default is not defined in XOM. It's default to false because the Boolean( String s) constructor returns false for any value other than "true" (case ignored) -->
      <xs:annotation>
        <xs:documentation>
          Should be set to true if the value of the property is functionally dependent on the level value.
          This permits the associated property column to be omitted from the GROUP BY clause
          (if the database permits columns in the SELECT that are not in the GROUP BY).
          This can be a significant performance enhancement on some databases, such as MySQL.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="MeasureType">
    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="MeasureExpression" type="ExpressionViewType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The SQL expression used to calculate a measure.
            Must be specified if a source column is not specified.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CellFormatter" type="CellFormatterType" minOccurs="0"/> <!-- New -->
      <xs:element name="CalculatedMemberProperty" type="CalculatedMemberPropertyType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this measure.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="column" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Column which is source of this measure's values. If not specified,
          a measure expression must be specified.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datatype">
      <xs:annotation>
        <xs:documentation>
          The datatype of this measure: String, Numeric, Integer.
          The default datatype of a measure is 'Integer' if the measure's aggregator is 'Count', otherwise it is 'Numeric'.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="String"/>
          <xs:enumeration value="Numeric"/>
          <xs:enumeration value="Integer"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="formatString" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Format string with which to format cells of this measure.
          For more details, see the mondrian.util.Format class.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="aggregator" use="required"> <!-- TODO MondrianDef allows any value. We restricted values according to comments and did not include "distinct count" as a possible value because it is deprecated. -->
      <xs:annotation>
        <xs:documentation>
          Aggregation function. Allowed values are "sum", "count", "min", "max", "avg", and "distinct-count".
          ("distinct count" is allowed for backwards compatibility, but is deprecated because XML
          enumerated attributes in a DTD cannot legally contain spaces.)
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="sum"/>
          <xs:enumeration value="count"/>
          <xs:enumeration value="min"/>
          <xs:enumeration value="max"/>
          <xs:enumeration value="avg"/>
          <xs:enumeration value="distinct-count"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="formatter" type="xs:string" > <!-- TODO couldn't find a good way to mark as deprecated. Check if there is a reasonable way to do it -->
      <xs:annotation>
        <xs:documentation>
          This attribute is deprecated. Please use a nested CellFormatter element.

          Name of a formatter class for the member labels being displayed.
          The class must implement the mondrian.olap.CellFormatter interface.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the name.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this measure. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Whether this member is visible in the user-interface. Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="CalculatedMemberType">
    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="Formula" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            MDX expression which gives the value of this member.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CellFormatter" type="CellFormatterType" minOccurs="0"/> <!-- New -->
      <xs:element name="CalculatedMemberProperty" type="CalculatedMemberPropertyType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this calculated member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formatString" type="xs:string"> <!-- TODO should this be deprecated given the new CellFormatter element? -->
      <xs:annotation>
        <xs:documentation>
          Format string with which to format cells of this member.
          For more details, see {@link mondrian.util.Format}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the name. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          Description of this calculated member. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formula" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          MDX expression which gives the value of this member. Equivalent to the Formula sub-element.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dimension" type="xs:string"> <!-- TODO couldn't find a good way to mark as deprecated. Check if there is a reasonable way to do it -->
      <!-- New / Change : this attribute was required in the old xsd, but is now optional -->
      <xs:annotation>
        <xs:documentation>
          This attribute is deprecated. Please use hierarchy attribute instead.

          Name of the dimension which this member belongs to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hierarchy" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the hierarchy that this member belongs to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute> <!-- New -->
    <xs:attribute name="parent" type="xs:string"> <!-- New -->
      <xs:annotation>
        <xs:documentation>
          Fully-qualified name of the parent member.
          If not specified, the member will be at the lowest level
          (besides the 'all' level) in the hierarchy.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean" default="true"> <!-- TODO XOM does not define a default value. MondrianDef will use the Boolean constructor which will return false for null values. However the default value should be true...  Some XOM elements define true as the default value. Check "visible" attributes of other elements -->
      <xs:annotation>
        <xs:documentation>
          Whether this member is visible in the user-interface. Default true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="CalculatedMemberPropertyType">
    <xs:annotation>
      <xs:documentation>
        Property of a calculated member defined against a cube. It must have either an expression or a value.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this member property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A string being displayed instead of the Properties's name.
          Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this calculated member property. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expression" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          MDX expression which defines the value of this property.
          If the expression is a constant string, you could enclose it in quotes,
          or just specify the 'value' attribute instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Value of this property. If the value is not constant,
          specify the 'expression' attribute instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="NamedSetType">
    <xs:annotation>
      <xs:documentation>
        Defines a named set which can be used in queries in the same way as a set
        defined using a WITH SET clause. A named set can be defined against a particular cube,
        or can be global to a schema. If it is defined against a cube, it is only available to queries which use that cube.
        A named set defined against a cube is not inherited by a virtual cubes defined against that cube.
        (But you can define a named set against a virtual cube). A named set defined against a schema
        is available in all cubes and virtual cubes in that schema.
        However, it is only valid if the cube contains dimensions with the names required to make the formula valid.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0"/>
      <xs:element name="Formula" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            MDX expression which gives the value of this set.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of this named set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="caption" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Caption of this named set. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Description of this named set. Can be localized from Properties file using #{propertyname}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formula" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          MDX expression which gives the value of this set. Equivalent to the Formula sub-element.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="MemberReaderParameterType"> <!-- TODO there's a comment saying this is not used. Check what to do. Perhaps mark as deprecated. -->
    <xs:annotation>
      <xs:documentation>
        Not used
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required"/> <!-- TODO optional in XOM -->
    <xs:attribute name="value" type="xs:string" use="required"/> <!-- TODO optional in XOM -->
  </xs:complexType>

  <xs:group name="RelationGroup">
    <xs:annotation>
      <xs:documentation>
        A Table or a View or an InlineTable.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="Table" type="TableType"/>
      <xs:element name="View" type="ViewType"/>
      <xs:element name="InlineTable" type="InlineTableType"/>
    </xs:choice>
  </xs:group>

  <xs:group name="RelationOrJoinGroup" >
    <xs:annotation>
      <xs:documentation>
        A Relation or a Join.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:group ref="RelationGroup"/>
      <xs:element name="Join" type="JoinType"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="ViewType">
    <xs:annotation>
      <xs:documentation>
        A collection of SQL statements, one per dialect.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="SQL" type="SQLType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="alias" type="xs:string" use="required" />

  </xs:complexType>

  <xs:complexType name="SQLType" mixed="true">
    <xs:attribute name="dialect" type="xs:string" default="generic"> <!-- TODO in XSD was as required without default value -->
      <xs:annotation>
        <xs:documentation>
          Dialect of SQL the view is intended for. Valid values include, but are not limited to:
          * generic
          * access
          * db2
          * derby
          * firebird
          * googlebigquery
          * greenplum
          * hsqldb
          * hive
          * impala
          * infobright
          * informix
          * ingres
          * interbase
          * luciddb
          * mariadb
          * monetdb
          * mssql
          * mysql
          * neoview
          * netezza
          * nuodb
          * oracle
          * pdi
          * postgres
          * redshift
          * snowflake
          * sqlstream
          * sybase
          * teradata
          * vectorwise
          * vertica
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="JoinType">
    <xs:sequence>
      <xs:group ref="RelationOrJoinGroup" minOccurs="2" maxOccurs="2">
        <xs:annotation>
          <xs:documentation>
            The left and right relations or joins.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
    </xs:sequence>

    <xs:attribute name="leftAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Defaults to left's alias if left is a table, otherwise required.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="leftKey" type="xs:string" use="required"/> <!-- TODO required by XOM not required in old xsd -->
    <xs:attribute name="rightAlias" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Defaults to right's alias if right is a table, otherwise required.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rightKey" type="xs:string" use="required"/> <!-- TODO required by XOM not required in old xsd -->

  </xs:complexType>

  <xs:complexType name="TableType">
    <xs:sequence>
      <xs:element name="SQL" type="SQLType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The SQL WHERE clause expression to be appended to any select statement
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AggExclude" type="AggExcludeType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:group ref="AggTableGroup" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            A definition of an aggregate table for a base fact table.
            This aggregate table must be in the same schema as the base fact table.
          </xs:documentation>
        </xs:annotation>
      </xs:group>
      <xs:element name="Hint" type="HintType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Dialect-specific table optimization hints.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="schema" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Optional qualifier for table.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alias" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Alias to be used with this table when it is used to form queries.
          If not specified, defaults to the table name, but in any case, must be unique within the schema.
          (You can use the same table in different hierarchies, but it must have different aliases.)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="HintType" mixed="true">
    <xs:attribute name="type" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Type of hint, interpreted and applied on a per-dialect basis.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RoleType">
    <xs:annotation>
      <xs:documentation>
        A role defines an access-control profile. It has a series of grants
        (or denials) for schema elements.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Annotations" type="AnnotationsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Contains values of user-defined properties.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SchemaGrant" type="SchemaGrantType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Union" type="UnionType" minOccurs="0"/>
      <xs:element name="RoleMember" type="RoleMemberType" minOccurs="0" maxOccurs="unbounded" /> <!-- TODO only present in XOM -->
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required" />

  </xs:complexType>

  <xs:complexType name="GrantType" abstract="true">
    <xs:annotation>
      <xs:documentation>
        Values correspond to <code>Access</code>.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="all"/>
          <xs:enumeration value="all-dimensions"/>
          <xs:enumeration value="custom"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="SchemaGrantType">
    <xs:complexContent>
      <xs:extension base="GrantType"> <!-- TODO in mondrian.xsd access only allows values "all" and "none" -->
        <xs:annotation>
          <xs:documentation>
            Grants (or denies) this role access to this schema. access may be "all", "all_dimensions", or "none".
            If access is "all_dimensions", the role has access to all dimensions but still needs explicit access to cubes.
            See mondrian.olap.Role#grant(mondrian.olap.Schema,int).
          </xs:documentation>
        </xs:annotation>

        <xs:sequence>
          <xs:element name="CubeGrant" type="CubeGrantType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CubeGrantType">
    <xs:complexContent>
      <xs:extension base="GrantType"> <!-- TODO in mondrian.xsd access only allows values "all" and "none" -->
        <xs:annotation>
          <xs:documentation>
            Grants (or denies) this role access to a cube.
            <code>access</code> may be "all", "custom", or "none".
            If <code>access</code> is "custom", no access will be inherited
            by the dimensions of this cube, unless the parent SchemaGrant is
            set to "ALL_DIMENSIONS".
            See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Cube, int)">mondrian.olap.Role#grant(mondrian.olap.Cube,int)</a>.
          </xs:documentation>
        </xs:annotation>

        <xs:sequence>
          <xs:element name="DimensionGrant" type="DimensionGrantType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="HierarchyGrant" type="HierarchyGrantType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>

        <xs:attribute name="cube" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>
              The unique name of the cube
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DimensionGrantType">
    <xs:complexContent>
      <xs:extension base="GrantType"> <!-- TODO in mondrian.xsd access only allows values "all" and "none" -->
        <xs:annotation>
          <xs:documentation>
            Grants (or denies) this role access to a dimension.
            <code>access</code> may be "all", "custom" or "none".
            Note that a role is implicitly given access to a dimension when it
            is given "ALL" acess to a cube.
            If <code>access</code> is "custom", no access will be inherited
            by the hierarchies of this dimension.
            If the parent schema <code>access</code> is "ALL_DIMENSIONS",
            this dimension will inherit <code>access</code> "ALL".
            See also the "all_dimensions" option of the "SchemaGrant" element.
            See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Dimension, int)">mondrian.olap.Role#grant(mondrian.olap.Dimension,int)</a>.
          </xs:documentation>
        </xs:annotation>
        <xs:attribute name="dimension" type="xs:string" use="required"> <!-- TODO required in mondrian.xsd -->
          <xs:annotation>
            <xs:documentation>
              The unique name of the dimension
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyGrantType">
    <xs:complexContent>
      <xs:extension base="GrantType"> <!-- TODO in mondrian.xsd access only allows values "all" and "none" -->
        <xs:annotation>
          <xs:documentation>
            Grants (or denies) this role access to a hierarchy.
            <code>access</code> may be "all", "custom" or "none".
            If <code>access</code> is "custom", you may also specify the
            attributes <code>topLevel</code>, <code>bottomLevel</code>, and
            the member grants.
            If <code>access</code> is "custom", the child levels of this
            hierarchy will not inherit access rights from this hierarchy,
            should there be no explicit rules defined for the said child level.
            See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Hierarchy, int, mondrian.olap.Level)">mondrian.olap.Role#grant(mondrian.olap.Hierarchy, int, mondrian.olap.Level)</a>.
          </xs:documentation>
        </xs:annotation>

        <xs:sequence>
          <xs:element name="MemberGrant" type="MemberGrantType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>

        <xs:attribute name="hierarchy" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    The unique name of the hierarchy
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="topLevel" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              Unique name of the highest level of the hierarchy from which
              this role is allowed to see members. May only be specified if
              the <code>HierarchyGrant.access</code> is "custom". If not
              specified, role can see members up to the top level.el.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="bottomLevel" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              Unique name of the lowest level of the hierarchy from which
              this role is allowed to see members. May only be specified if
              the <code>HierarchyGrant.access</code> is "custom". If not
              specified, role can see members down to the leaf level.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rollupPolicy" default="full">
          <xs:annotation>
            <xs:documentation>
              Policy which determines how cell values are calculated if not all the children of the current cell are visible to the current role.
              Allowable values are 'full' (the default), 'partial', and 'hidden'.
            </xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="full"/>
              <xs:enumeration value="partial"/>
              <xs:enumeration value="hidden"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MemberGrantType">
    <xs:annotation>
      <xs:documentation>
        Grants (or denies) this role access to a member.
        The children of this member inherit that access.
        You can implicitly see a member if you can see any of its children.
        See <a href="api/mondrian/olap/Role.html#grant(mondrian.olap.Member, int)">mondrian.olap.Role#grant(mondrian.olap.Member,int)</a>.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="access" use="required">
      <xs:annotation>
        <xs:documentation>
          Values correspond to Access.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="all"/>
          <xs:enumeration value="none"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="member" type="xs:string" use="required"> <!-- TODO only required in XOM -->
      <xs:annotation>
        <xs:documentation>
          The unique name of the member
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RoleMemberType">
    <xs:annotation>
      <xs:documentation>
          User name or member group name.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" use="required"/>
  </xs:complexType>

  <xs:complexType name="UnionType">
    <xs:annotation>
      <xs:documentation>
        Body of a Role definition which defines a Role to be the union
        of several Roles. The RoleUsage elements must refer to Roles that
        have been declared earlier in this schema file.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="RoleUsage" type="RoleUsageType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs 1 in mondrian.xsd -->
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="RoleUsageType">
    <xs:annotation>
      <xs:documentation>
        Usage of a Role in a union Role.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="roleName" type="xs:string" use="required"/> <!-- TODO not required in mondrian.xsd -->
  </xs:complexType>

  <xs:complexType name="UserDefinedFunctionType">
    <xs:annotation>
      <xs:documentation>
        A <code>UserDefinedFunction</code> is a function which
        extends the MDX language. It must be implemented by a Java
        class which implements the interface
        <a href="api/mondrian/spi/UserDefinedFunction.html">mondrian.spi.UserDefinedFunction</a>
        or by a <code>Script</code>.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Script" type="ScriptType" minOccurs="0" />
    </xs:sequence>

    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name with which the user-defined function will be referenced in MDX expressions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="className" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Name of the class which implements this user-defined function.
          Must implement the <code>mondrian.spi.UserDefinedFunction</code>
          interface.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="ScriptType">
    <xs:annotation>
      <xs:documentation>
        Script fragment to implement an SPI such as user-defined function,
        member formatter, cell formatter.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="language" type="xs:string" default="JavaScript">
      <xs:annotation>
        <xs:documentation>
          The language of the script. Must be a supported scripting
          language in the current JVM. See
          {@link javax.script.ScriptEngineManager}.
          Default value is 'JavaScript'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ElementFormatterType" abstract="true"> <!--TODO does not exist in mondrian.xsd -->
    <xs:annotation>
      <xs:documentation>
        Abstract type just in order to avoid duplication.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="Script" type="ScriptType" minOccurs="0"/>
    </xs:sequence>

    <xs:attribute name="className" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          Name of the class which implements this formatter.
          Must implement the corresponding SPI
          interface.
          <p>Either the "Script" element or the "className" attribute
          must be specified.</p>
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="CellFormatterType"> <!--TODO does not add anything to ElementFormatterType. Can probably be deleted for simplification. -->
    <xs:annotation>
      <xs:documentation>
        Plugin that formats the values of cells.
        It must be implemented by a Java
        class which implements the interface
        <a href="api/mondrian/spi/CellFormatter.html">mondrian.spi.CellFormatter</a>,
        or by a script.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ElementFormatterType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MemberFormatterType"> <!--TODO does not add anything to ElementFormatterType. Can probably be deleted for simplification. -->
    <xs:annotation>
      <xs:documentation>
        Plugin that formats members.
        It must be implemented by a Java
        class which implements the interface
        <a href="api/mondrian/spi/MemberFormatter.html">mondrian.spi.MemberFormatter</a>,
        or by a script.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ElementFormatterType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PropertyFormatterType"> <!--TODO does not add anything to ElementFormatterType. Can probably be deleted for simplification. -->
    <xs:annotation>
      <xs:documentation>
        Plugin that formats properties.
        It must be implemented by a Java
        class which implements the interface
        <a href="api/mondrian/spi/PropertyFormatter.html">mondrian.spi.PropertyFormatter</a>,
        or by a script.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ElementFormatterType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InlineTableType">
    <xs:sequence>
      <xs:element name="ColumnDefs" type="ColumnDefsType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="Rows" type="RowsType" minOccurs="1" maxOccurs="1"/>
    </xs:sequence>

    <xs:attribute name="alias" type="xs:string"> <!--TODO not present in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          Alias to be used with this table when it is used to
          form queries. If not specified, defaults to the table
          name, but in any case, must be unique within the
          schema. (You can use the same table in different
          hierarchies, but it must have different aliases.)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="ColumnDefsType">
    <xs:annotation>
      <xs:documentation>
        Holder for an array of ColumnDef elements
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ColumnDef" type="ColumnDefType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs 1 in mondrian.xsd -->
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ColumnDefType">
    <xs:annotation>
      <xs:documentation>
        Column definition for an inline table.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required"> <!-- TODO not required in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          Name of the column.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" use="required"> <!-- TODO not required in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          Type of the column:
          String, Numeric, Integer, Boolean, Date, Time or Timestamp.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="String"/>
          <xs:enumeration value="Numeric"/>
          <xs:enumeration value="Integer"/>
          <xs:enumeration value="Boolean"/>
          <xs:enumeration value="Date"/>
          <xs:enumeration value="Time"/>
          <xs:enumeration value="Timestamp"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RowsType">
    <xs:annotation>
      <xs:documentation>
        Holder for an array of Row elements
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Row" type="RowType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs 1 in mondrian.xsd -->
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="RowType">
    <xs:annotation>
      <xs:documentation>
        Row definition for an inline table.
        Must have one Column for each ColumnDef in the InlineTable.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Value" type="ValueType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs 1 in mondrian.xsd -->
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ValueType">
    <xs:annotation>
      <xs:documentation>
        Column value for an inline table.
        The CDATA holds the value of the column.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="column" type="xs:string" use="required"> <!-- TODO not required in mondrian.xsd but required in MondrianXOM.xml -->
      <xs:annotation>
        <xs:documentation>
          Name of the column.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AggMeasureType">
    <xs:attribute name="column" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The name of the column mapping to the measure name.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The name of the Cube measure.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rollupType" type="xs:string"> <!-- TODO not present in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation> <!-- TODO should this be an enum? it is a plain string in XOM-->
          Explicitly define rollup type. Available types: AvgFromSum, AvgFromAvg, SumFromAvg.
          Will be ignored if wrong type is chosen.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AggLevelPropertyType"> <!-- TODO not present in mondrian.xsd -->
    <xs:annotation>
      <xs:documentation>
        Member property.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string"/>
    <xs:attribute name="column" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="AggLevelType">
    <xs:sequence>
      <xs:element name="AggLevelProperty" type="AggLevelPropertyType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="column" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation> <!-- TODO different comment in mondrian.xsd -->
          The name of the column mapping to the level name.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ordinalColumn" type="xs:string"> <!-- TODO not present in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          The ordinal column for this level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="captionColumn" type="xs:string"> <!-- TODO not present in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          The name of the database column that holds the caption for this level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation> <!-- TODO different comment in mondrian.xsd -->
          The name of the Dimension Hierarchy level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nameColumn" type="xs:string"> <!-- TODO not present in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          The name of the column which holds the user identifier of
          this level.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collapsed" type="xs:boolean" default="true"> <!-- TODO not present in mondrian.xsd -->
      <xs:annotation>
        <xs:documentation>
          Whether this is a collapsed level. The parents of that level
          are also present in the aggregation table.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="AggForeignKeyType">
    <xs:annotation>
      <xs:documentation>
        The name of the column mapping from base fact table foreign key
        to aggregate table foreign key.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="factColumn" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The name of the base fact table foreign key.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="aggColumn" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          The name of the aggregate table foreign key.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AggExcludeType">
    <xs:attribute name="pattern" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          A Table pattern not to be matched.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The Table name not to be matched.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ignorecase" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether or not the match should ignore case.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="AggTableType" abstract="true">
    <xs:annotation>
      <xs:documentation>
        A definition of an aggregate table for a base fact table.
        This aggregate table must be in the same schema as the
        base fact table.
      </xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="AggFactCount" type="AggColumnNameType" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            What does the fact_count column look like.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AggMeasureFactCount" type="AggMeasureFactCountType" minOccurs="0" maxOccurs="unbounded"> <!-- TODO not present in mondrian.xsd -->
        <xs:annotation>
          <xs:documentation>
            What does the fact_count column look like.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AggIgnoreColumn" type="AggColumnNameType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="AggForeignKey" type="AggForeignKeyType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="AggMeasure" type="AggMeasureType" minOccurs="1" maxOccurs="unbounded"/> <!-- TODO minOccurs 1 in mondrian.xsd -->
      <xs:element name="AggLevel" type="AggLevelType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>

    <xs:attribute name="ignorecase" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>
          Whether or not the match should ignore case.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="AggNameType">
    <xs:complexContent>
      <xs:extension base="AggTableType">
        <xs:attribute name="name" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>
              The Table name of a Specific aggregate table.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="approxRowCount" type="xs:string" use="required"> <!--TODO not present in mondrian.xsd -->
          <xs:annotation>
            <xs:documentation>
              The estimated number of rows in this aggregation
              table. Setting this property improves the
              performance of the aggregation optimizer and
              prevents it from issuing a 'select count(*)'
              query over the aggregation table.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AggPatternType">
    <xs:complexContent>
      <xs:extension base="AggTableType">
        <xs:sequence>
          <xs:element name="AggExclude" type="AggExcludeType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>

        <xs:attribute name="pattern" type="xs:string" use="required">
          <xs:annotation>
            <xs:documentation>
             A Table pattern used to define a set of aggregate tables.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="AggTableGroup">
    <xs:choice>
      <xs:element name="AggName" type="AggNameType"/>
      <xs:element name="AggPattern" type="AggPatternType"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="AggColumnNameType"> <!-- TODO no longer abstract, as it was in XOM, to use in AggFactCountType's place -->
    <xs:attribute name="column" type="xs:string" use="required" /> <!-- TODO Didn't add comment from MondrianXOM, as it seems to belong to one of the subclasses -->
  </xs:complexType>

  <xs:complexType name="AggMeasureFactCountType">
      <xs:complexContent>
        <xs:extension base="AggColumnNameType">
          <xs:attribute name="factColumn" type="xs:string" use="required">
            <xs:annotation>
              <xs:documentation>
                The name of the fact column associated with a base measure.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExpressionViewType"> <!-- TODO used this type for subclasses that were not adding anything -->
    <xs:annotation>
      <xs:documentation>
        A collection of SQL expressions, one per dialect.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SQL" type="SQLType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

</xs:schema>
